/*
     - bcrypt library for password hashing
     - hashedPassword is a hash of user password and salt generated by bcrypt library 
     
*/

const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const { accesstoken } = require("./genToken");

const { Users } = require("../../models");

const SignUp = async (data) => {
    const { username, email, password, contact } = data;
    const salt = await bcrypt.genSalt(15);
    const hashedPassword = await bcrypt.hash(password, salt);

    try {
        const newUser = await Users.create({
            username,
            email,
            password: hashedPassword,
            contact_number: contact,
        });
        const _refresh_token = await accesstoken(newUser);
        return [_refresh_token, newUser];
    } catch (error) {
        return error.message;
    }
};
const SignIn = async (data) => {
    const { email, password } = data;

    // checking for user existence through email as emails are unique

    let user = await Users.findOne({
        where: {
            email,
        },
    });

    // comparing password

    const isValid = bcrypt.compare(password, user.password);

    // sending 'or' incorrect for security reasons
    if (!user || !isValid) return "Email or Password incorrect. Try Again.";

    // jwt refresh token signing
};

module.exports = {
    SignUp,
    SignIn,
};
