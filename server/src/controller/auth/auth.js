/*
     - bcrypt library for password hashing
     - @hashedPassword is a hash of user password and salt generated by bcrypt library 
     
*/

const bcrypt = require("bcrypt");
const { accessToken } = require("./genToken");
const { User } = require("../../models");
const SignUp = async (data) => {
    const { username, email, password, contact } = data;

    const salt = await bcrypt.genSalt(15);

    const hashedPassword = await bcrypt.hash(password, salt);

    try {
        const newUser = await User.create({
            username,
            email,
            password: hashedPassword,
            contact_number: contact,
        });

        const access_token = await accessToken(newUser);

        return { newUser, access_token };
    } catch (error) {
        console.log(error);
        return { error: error.message };
    }
};
const SignIn = async (data) => {
    const { email, password } = data;

    // checking for user existence through email
    try {
        let user = await User.findOne({
            where: {
                email,
            },
        });

        // comparing password
        const isValid = bcrypt.compare(password, user.password);

        // sending 'or' incorrect for security reasons
        if (!user || !isValid)
            throw new Error({
                message: "Invalid email or password. Try again",
            });

        const access_token = accessToken(user);

        return { user, access_token };
    } catch (error) {
        console.log(error.message);
        return error;
    }
};

module.exports = {
    SignUp,
    SignIn,
};
